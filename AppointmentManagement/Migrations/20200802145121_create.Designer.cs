// <auto-generated />
using System;
using AppointmentManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AppointmentManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200802145121_create")]
    partial class create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AppointmentManagement.Domain.AggregateModels.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnName("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnName("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnName("PatientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnName("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            Id = "A1",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 738, DateTimeKind.Local).AddTicks(1210),
                            DoctorId = "D1",
                            End = new DateTime(2018, 3, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P1",
                            Start = new DateTime(2018, 3, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 738, DateTimeKind.Local).AddTicks(1210)
                        },
                        new
                        {
                            Id = "A2",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(480),
                            DoctorId = "D1",
                            End = new DateTime(2018, 4, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P1",
                            Start = new DateTime(2018, 4, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(480)
                        },
                        new
                        {
                            Id = "A3",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(640),
                            DoctorId = "D1",
                            End = new DateTime(2018, 3, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P2",
                            Start = new DateTime(2018, 3, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(640)
                        },
                        new
                        {
                            Id = "A4",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(660),
                            DoctorId = "D1",
                            End = new DateTime(2018, 4, 8, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P1",
                            Start = new DateTime(2018, 4, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(660)
                        },
                        new
                        {
                            Id = "A5",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(670),
                            DoctorId = "D2",
                            End = new DateTime(2018, 3, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P1",
                            Start = new DateTime(2018, 3, 18, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(670)
                        },
                        new
                        {
                            Id = "A6",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(680),
                            DoctorId = "D2",
                            End = new DateTime(2018, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P1",
                            Start = new DateTime(2018, 4, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(680)
                        },
                        new
                        {
                            Id = "A7",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(690),
                            DoctorId = "D2",
                            End = new DateTime(2018, 3, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P3",
                            Start = new DateTime(2018, 3, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(690)
                        },
                        new
                        {
                            Id = "A8",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(700),
                            DoctorId = "D2",
                            End = new DateTime(2018, 4, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "P3",
                            Start = new DateTime(2018, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 743, DateTimeKind.Local).AddTicks(700)
                        });
                });

            modelBuilder.Entity("AppointmentManagement.Domain.AggregateModels.DoctorAggregate.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "D1",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 744, DateTimeKind.Local).AddTicks(8340),
                            Name = "Dr Carrot",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 744, DateTimeKind.Local).AddTicks(8340)
                        },
                        new
                        {
                            Id = "D2",
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 744, DateTimeKind.Local).AddTicks(8930),
                            Name = "Dr Cucumber",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 744, DateTimeKind.Local).AddTicks(8930)
                        });
                });

            modelBuilder.Entity("AppointmentManagement.Domain.AggregateModels.PatientAggregate.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("Id")
                        .HasColumnType("text");

                    b.Property<long>("Age")
                        .HasColumnName("Age")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = "P1",
                            Age = 12L,
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(5660),
                            Gender = "M",
                            Name = "Pear",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(5660)
                        },
                        new
                        {
                            Id = "P2",
                            Age = 22L,
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(7100),
                            Gender = "F",
                            Name = "Apple",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(7100)
                        },
                        new
                        {
                            Id = "P3",
                            Age = 32L,
                            CreatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(7140),
                            Gender = "M",
                            Name = "Orange",
                            UpdatedAt = new DateTime(2020, 8, 2, 22, 51, 20, 745, DateTimeKind.Local).AddTicks(7140)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
